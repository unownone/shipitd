name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  BINARY_NAME: shipit-client

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21, 1.22]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: go mod download

    - name: Run linter
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            binary: shipit-client
          - os: darwin
            arch: amd64
            binary: shipit-client
          - os: darwin
            arch: arm64
            binary: shipit-client
          - os: windows
            arch: amd64
            binary: shipit-client.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
        go build -ldflags "-X main.Version=${{ steps.version.outputs.VERSION }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
        -o ${{ matrix.binary }} ./cmd/client

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ matrix.binary }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run security scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run dependency check
      run: |
        go mod verify
        go mod tidy -check

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run integration tests
      run: |
        go test -v ./internal/testing/...

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./internal/testing/...

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, security, integration-test]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download all build artifacts
      uses: actions/download-artifact@v3

    - name: Create release packages
      run: |
        mkdir -p dist
        for artifact in linux-amd64 darwin-amd64 darwin-arm64 windows-amd64; do
          if [ -f "$artifact/shipit-client" ]; then
            cp "$artifact/shipit-client" "dist/shipit-client-$artifact"
          elif [ -f "$artifact/shipit-client.exe" ]; then
            cp "$artifact/shipit-client.exe" "dist/shipit-client-$artifact.exe"
          fi
        done

    - name: Create release archives
      run: |
        cd dist
        tar -czf shipit-client-${{ github.event.release.tag_name }}-linux-amd64.tar.gz shipit-client-linux-amd64
        tar -czf shipit-client-${{ github.event.release.tag_name }}-darwin-amd64.tar.gz shipit-client-darwin-amd64
        tar -czf shipit-client-${{ github.event.release.tag_name }}-darwin-arm64.tar.gz shipit-client-darwin-arm64
        zip shipit-client-${{ github.event.release.tag_name }}-windows-amd64.zip shipit-client-windows-amd64.exe

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/shipit-client-${{ github.event.release.tag_name }}-linux-amd64.tar.gz
        asset_name: shipit-client-${{ github.event.release.tag_name }}-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/shipit-client-${{ github.event.release.tag_name }}-darwin-amd64.tar.gz
        asset_name: shipit-client-${{ github.event.release.tag_name }}-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/shipit-client-${{ github.event.release.tag_name }}-darwin-arm64.tar.gz
        asset_name: shipit-client-${{ github.event.release.tag_name }}-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/shipit-client-${{ github.event.release.tag_name }}-windows-amd64.zip
        asset_name: shipit-client-${{ github.event.release.tag_name }}-windows-amd64.zip
        asset_content_type: application/zip

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          shipit/client:latest
          shipit/client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 